{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"KEML","text":"<p>KEML \u2014 Actions over abstractions. Enhance HTML with expressive, declarative attributes that connect your frontend directly to your server logic.</p> <p> </p> <p>KEML is a modern HTML extension that adds powerful, declarative attributes to standard markup. With KEML, you define behaviors like form submission, navigation, state transitions, and conditional rendering directly in your HTML \u2014 all handled by the server. There's no client-side JavaScript to write, manage, or debug. Just clean, maintainable, server-driven apps.</p> <p>KEML builds on the core idea that HTML can drive your application's behavior. Inspired by the elegance of HTMX (https://htmx.org), KEML takes that vision further \u2014 removing limitations, embracing composability, and keeping everything within your markup.</p> <p>No selectors. No JavaScript. No surprises. Just expressive, maintainable, declarative HTML.</p>"},{"location":"index.html#motivation","title":"Motivation","text":"<p>Being small and fast and configuration/plugin free is not enough, when you are trying to compete with a well established and popular library.</p>"},{"location":"index.html#so-why-does-keml-need-to-exist","title":"So, why does KEML need to exist?","text":"<p>KEML was born out of the classic 1-to-1 problem of the traditional jQuery-esque web application, that the HTMX api does nothing to address.</p> <p>Consider the following \"idiomatic\" HTMX code:</p> <pre><code>&lt;button\n  hx-post=\"/clicked\"\n  hx-trigger=\"click\"\n  hx-target=\"#result\"\n  hx-swap=\"innerHTML\"\n&gt;\n  Click Me!\n&lt;/button&gt;\n\n&lt;div id=\"result\"&gt;&lt;/div&gt;\n</code></pre> <p>Here the button element:</p> <ol> <li>can only react to exactly 1 event (\"click\")</li> <li>can only do 1 thing when that event happens (send a request to \"/clicked\")</li> <li>cannot delegate the request-sending to some other element/-s</li> <li>can only render the result into 1 (usually) target element</li> <li>has to know where that element is on the page, what its \"id\" and/or \"class\"    attributes are</li> <li>has to decide for the target element the exact \"hx-swap\", of which there can    only be 1</li> </ol> <p>Out of these limitations arise:</p> <ol> <li>the need for a custom selector syntax built on top of the normal    css-selector syntax</li> <li>the need for selectors in the first place, which you need to learn and    understand to use the library effectively</li> <li>the implicit special handling of certain elements, like title and meta,    present in the server response</li> <li>out of band swaps</li> <li>response selectors</li> <li>\"hx-preserve\"</li> <li>etc, etc, etc...</li> </ol> <p>All which, are meant to solve real tangible application needs, but in the process of doing that over-complicate things that do not need to be complicated.</p>"},{"location":"index.html#how-is-keml-different","title":"How is KEML different?","text":"<p>Consider the following KEML code, that works with the same backend:</p> <pre><code>&lt;html&gt;\n\n&lt;head&gt;\n  &lt;title render=\"result\"&gt;&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;button\n    on:click=\"handleClick doSomethingElse\"\n    on:dblclick=\"handleDoubleClick\"\n  &gt;\n    Click Me!\n  &lt;/button&gt;\n\n  &lt;button on:click=\"handleClick\"&gt;Click Me, maybe?!&lt;/button&gt;\n\n  &lt;input\n    on=\"handleClick\"\n    post=\"/clicked\"\n    type=\"text\"\n    name=\"input1\"\n    result=\"result\"\n  &gt;\n\n  &lt;input\n    on=\"handleClick\"\n    put=\"/notification\"\n    type=\"text\"\n    name=\"input2\"\n  &gt;\n\n  &lt;div\n    render=\"result\"\n    position=\"replaceWith\"\n  &gt;&lt;/div&gt;\n\n  &lt;p\n    render=\"result\"\n    position=\"append\"\n  &gt;&lt;/p&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <ol> <li>both buttons initiate the same \"handleClick\" action on \"click\"</li> <li>the first button actually initiates two independent actions on \"click\", that    could both do completely different things</li> <li>the first button also reacts to the double click event</li> <li>neither of the buttons needs to know how those actions are being handled, if    at all</li> <li>the two text inputs both handle the \"handleClick\" action, but send    completely different requests</li> <li>the first input gives the server response a render-able name \"result\"</li> <li>neither of the inputs knows anything about the rendering, whether or not    anything is even going to be rendered at all, where and how</li> <li>the div, p and title elements render the same server response differently</li> <li>the div will be completely replaced with the response</li> <li>the p will append the response after its last child</li> <li>the title will replace all of its children with the response</li> <li>there is nothing special about the title element at all</li> <li>there's no need for ids, classes or selectors and the location of each    element in the document is completely unimportant</li> </ol> <p>None of the problems that HTMX tries to solve with the complications listed above even exist in this paradigm!</p>"},{"location":"action.html","title":"Handling actions","text":"<p>HTML elements can trigger server requests and redirects in response to an action.</p> <p>More than one element can handle the same action and can trigger different requests.</p> <p>Relative endpoints are supported, so given a current URL of \"https://www.example.com/some/path\":</p> <ul> <li>\"list-todo\" or \"./list-todo\" \u2192 \"https://www.example.com/some/path/list-todo/\"</li> <li>\"../list-todo\" \u2192 \"https://www.example.com/some/list-todo/\"</li> <li>\"/list-todo\" \u2192 \"https://www.example.com/list-todo/\"</li> <li>\"/file.html\" \u2192 \"https://www.example.com/file.html\"</li> </ul> <p>A trailing slash is always present for paths not ending with a file extension, and is never present for ones that are.</p> <p>Forms and form fields values are automatically serialized and sent to the server.</p> <p>What's more is that ANY element that sends a request can also be made serializable by giving it the \"name\" and the \"value\" attributes.</p> <p>A request is only allowed if an element is considered valid (i.e. it either does not have a <code>checkValidity</code> method or it returns true).</p> <p>KEML makes the server aware of the AJAX nature of its requests by automatically including a special \"X-Requested-With\" header in each request.</p> <p>KEML makes the server aware of the browsers timezone for the server-side date formatting by setting a \"tzo\" cookie to the value produced by the getTimezoneOffset function.</p>"},{"location":"action.html#attributes","title":"Attributes","text":"<ol> <li><code>on</code> subscribes the element to a single action, initiated by any element,   including the current one</li> <li><code>reset</code> also subscribes the element to a single action, initiated by any element, including the current one, but is used specifically for resetting the current element (like a form or a form field, but really any element that has a <code>reset</code> method with the following signature: <code>() =&gt; void</code>); resets are immediate and are not affected by <code>debounce</code> and <code>throttle</code></li> <li><code>redirect</code> if specified on an element with an <code>on</code> attribute makes it issue redirects instead of requests; redirect URIs are resolved exactly the same way as the request URIs; can have one of four possible values:<ul> <li><code>pushState</code> will call the same method of the history api</li> <li><code>replaceState</code> will call the same method of the history api</li> <li><code>assign</code> the same as <code>pushState</code>, but will cause a full page reload</li> <li><code>replace</code> the same as <code>replaceState</code>, but will cause a full page reload</li> </ul> </li> <li><code>href</code>, <code>action</code>, <code>src</code>, <code>get</code>, <code>post</code>, <code>put</code> or <code>delete</code> are used to specify   an endpoint to call (the default endpoint is \"\")</li> <li><code>method</code>, <code>get</code>, <code>post</code>, <code>put</code> or <code>delete</code> are used to specify the HTTP   method to use in the request (the default method is \"GET\")</li> <li><code>name</code> and <code>value</code> can be used on any element, not just on form fields</li> <li><code>debounce</code> specifies a number of milliseconds by which to debounce a request/redirect</li> <li><code>throttle</code> specifies a number of milliseconds by which to throttle a request/redirect</li> <li>any attribute that starts with <code>h-</code> and contains a custom request header value</li> <li><code>credentials</code> with any value or none at all, sets the   XMLHttpRequest.withCredentials   value to <code>true</code></li> <li><code>once</code> with any value or none at all, automatically removes the <code>on</code> attribute before starting a request/redirect</li> </ol>"},{"location":"action.html#request-example","title":"Request Example","text":"<ul> <li>clicking the button initiates the <code>doSomething</code> action</li> <li>the div subscribes to that action and sends a \"GET\" request to \"/data\"</li> <li>the checkbox subscribes to that action and sends a \"POST\" request to   \"/toggle\" with a multipart encoded body containing its value</li> <li>nothing else happens since neither of the elements specifies what to do with   their respective server responses</li> </ul> <pre><code>&lt;button on:click=\"doSomething\"&gt;click me&lt;/button&gt;\n\n&lt;div\n  on=\"doSomething\"\n  get=\"/data\"\n&gt;&lt;/div&gt;\n\n&lt;input\n  on=\"doSomething\"\n  post=\"/toggle\"\n  type=\"checkbox\"\n  name=\"agree\"\n&gt;\n</code></pre>"},{"location":"action.html#redirect-example","title":"Redirect Example","text":"<ul> <li>this is exactly like the example above, but, because of the <code>redirect</code> attribute, instead of sending a network request we perform a redirect using the history api; in this case specifying an http method does nothing as it is meaningless in a redirect</li> </ul> <pre><code>&lt;button on:click=\"doSomething\"&gt;click me&lt;/button&gt;\n\n&lt;div\n  on=\"doSomething\"\n  redirect=\"pushState\"\n  get=\"/data\"\n&gt;&lt;/div&gt;\n</code></pre>"},{"location":"action.html#reset-example","title":"Reset Example","text":"<ul> <li>clicking the button resets the form</li> </ul> <pre><code>&lt;button on:click=\"resetForm\"&gt;click me&lt;/button&gt;\n\n&lt;form reset=\"resetForm\"&gt;&lt;/form&gt;\n</code></pre>"},{"location":"event.html","title":"Initiating actions","text":"<p>HTML elements can trigger any number of application actions in response to any number of events.</p> <p>More than one element can initiate the same action.</p> <p>An action signals that something happened, but by itself does nothing.</p> <p>All event types supported by the document object can be used, plus the following:</p> <ol> <li><code>reveal</code> - triggered when an element becomes visible in the viewport, on    initial page load or after a scroll</li> <li><code>conceal</code> - triggered when an element leaves the viewport after a scroll</li> <li><code>navigate</code> - triggered by the history api</li> <li><code>result</code> - triggered after a successful request and render of a response (you    can already rely on new attributes being present and working when this event    is triggered)</li> </ol> <p>All events bubble to the root of the DOM tree.</p>"},{"location":"event.html#attributes","title":"Attributes","text":"<ul> <li>any attribute that starts with <code>on:</code> and contains a space separated list of   actions to initiate</li> <li>any attribute that starts with <code>event:</code> and contains a comma separated list   of name and value pairs separated by <code>=</code>   The value part is optional and the key will only be checked for truthiness if   omitted.   Every key and value pair has to match the event object, otherwise the event   handling is skipped.   Can be used for associating hotkeys with an element, for example.</li> </ul>"},{"location":"event.html#basic-example","title":"Basic Example","text":"<ul> <li>moving the mouse cursor into the button initiates the <code>doSomething</code> action</li> <li>clicking the button initiates two actions: <code>loadData</code> and <code>updateCounter</code></li> <li>nothing happens as a result, since none of the elements subscribe to any   of these actions</li> </ul> <pre><code>&lt;button\n  on:mouseenter=\"doSomething\"\n  on:click=\"loadData updateCounter\"\n&gt;\n  click me\n&lt;/button&gt;\n</code></pre>"},{"location":"event.html#hotkey-example","title":"Hotkey Example","text":"<ul> <li>putting the cursor inside of the input and pressing <code>Alt+Esc</code> initiates the   <code>hotkeysAreCool</code> action</li> </ul> <pre><code>&lt;input\n  on:keyup=\"hotkeysAreCool\"\n  event:keyup=\"code=Escape, altKey\"\n&gt;\n</code></pre>"},{"location":"event.html#bubbling-example","title":"Bubbling Example","text":"<ul> <li>when you click on the image the <code>handleClick</code> action of a button is initiated,   because it is the first matching <code>on:&lt;event name&gt;</code> of a parent element</li> <li>this will work with any number of nesting levels (e.g. global hotkeys on the   body element)</li> </ul> <pre><code>&lt;button on:click=\"handleClick\"&gt;\n  &lt;img src=\"bat-cat.jpg\"&gt;\n&lt;/button&gt;\n</code></pre> <p>Warning</p> <p>Please be mindful that all actions are, by design, global for a page that they are used on.</p> <p>It is your responsibility to generate unique action names if you want to be certain that no other parts of the application will be affected by the actions that you trigger.</p> <p>Example of a potential pitfall:</p> <pre><code>&lt;button\n  on:click=\"loadData\"\n  on=\"loadData\"\n  get=\"/data.html\"\n&gt;\n  click me\n&lt;/button&gt;\n&lt;button\n  on:click=\"loadData\"\n  on=\"loadData\"\n  get=\"/data.html\"\n&gt;\n  click me\n&lt;/button&gt;\n</code></pre> <p>In the example above we can imagine that it was the same button component, simply rendered twice.</p> <p>But, they are two distinct elements on the page that trigger and subscribe to the same action <code>loadData</code>.</p> <p>Thus, when you click either one of them, 2 (!) network requests will be sent to the server.</p>"},{"location":"glossary.html","title":"Attribute Glossary","text":"<p>Info</p> <p>In the \"Applied With\" column, <code>*</code> means the attribute has no usage restrictions \u2014 it can be used on any element and does not require the presence of another attribute to function.</p> Name Applied With Description <code>on:&lt;event name&gt;</code> * initiate event actions <code>event:&lt;event name&gt;</code> <code>on:&lt;event name&gt;</code> cancel the event handling if the event object does not match the specified shape <code>on</code> * subscribe to an action to perform a network request or a redirect <code>debounce</code> <code>on</code> debounce network requests and redirects <code>throttle</code> <code>on</code> throttle network requests and redirects <code>get</code>, <code>href</code>, <code>action</code> or <code>src</code> <code>on</code> specify a server endpoint for a GET request <code>post</code> <code>on</code> specify a server endpoint for a POST request <code>put</code> <code>on</code> specify a server endpoint for a PUT request <code>delete</code> <code>on</code> specify a server endpoint for a DELETE request <code>method</code> <code>on</code> specify an HTTP method, overriding any otherwise inferred <code>name</code> + <code>value</code> <code>on</code> make any element serializable for the server request <code>credentials</code> <code>on</code> set the <code>XMLHttpRequest.withCredentials</code> flag to <code>true</code> for this request <code>h-&lt;header name&gt;</code> <code>on</code> specify any additional request headers <code>result</code> <code>on</code> initiate render actions after a successful response <code>error</code> <code>on</code> initiate render actions after an unsuccessful response <code>redirect</code> <code>on</code> disregard any request configuration except for the URL resolution and do a redirect instead <code>once</code> <code>on</code> remove the <code>on</code> attribute before the first request or redirect <code>if:loading</code> <code>on</code> initiate loading state actions right before starting a request <code>if:error</code> <code>on</code> initiate error state actions after an unsuccessful server response <code>render</code> * render a server response identified by a specific render action <code>key</code> * index based rendering performance optimization <code>position</code> <code>render</code> specify where to place the server response in relation to the current element <code>if:invalid</code> * initiate invalid state actions if an element's value becomes invalid <code>if:value</code> * initiate value state actions when the element's value is not empty <code>if:intersects</code> * initiate intersects state actions when the element intersects the viewport <code>if</code> * react to a single state action <code>x-&lt;attribute name&gt;</code> <code>if</code> turn an <code>x-</code> attribute into a real one when a state action activates"},{"location":"install.html","title":"Installation","text":"<p>KEML is designed to be ultra-simple to use \u2014 there is no programmatic API, no JavaScript exports, and no setup or configuration required.</p> <p>Simply include the library via CDN in your HTML:</p> <pre><code>&lt;script src=\"https://unpkg.com/keml\"&gt;&lt;/script&gt;\n</code></pre> <p>Alternatively, if you prefer to manage dependencies locally or bundle KEML with your project, you can install it using npm:</p> <pre><code>npm install keml\n</code></pre> <p>The compiled bundle <code>keml.js</code> will be available at the root of the installed package.</p>"},{"location":"install.html#using-keml-with-other-libraries-and-frameworks","title":"Using KEML with Other Libraries and Frameworks","text":"<p>KEML automatically observes all DOM changes, so you don\u2019t need to do anything special to integrate it.</p> <p>Whenever your application dynamically creates or updates elements, KEML will seamlessly handle them just like elements rendered on the server.</p> <p>This makes KEML compatible with virtually any frontend framework or custom JavaScript code without extra setup.</p>"},{"location":"news.html","title":"News","text":""},{"location":"news.html#v32","title":"v3.2","text":"<p>This release changes both everything and nothing at the same time.</p> <p>It is fully backward compatible, but shares almost no code in common with the old version.</p> <p>Nothing in your apps needs to change. If they are already working fine - they will continue to do so.</p> <p>You will be taking advantage of the improved performance, memory efficiency and correctness/reliability completely for free.</p> <p>So, what changed?</p>"},{"location":"news.html#performance","title":"Performance","text":"<p>3.2 does away with trying to be as small as possible at the expense of everything else. It will happily be larger if the payoff is better run-time performance. As a result, it has doubled in size to the still incredibly tiny 8kb.</p> <ol> <li>no functional code</li> <li>no regular expressions</li> <li>no recursion if it can be avoided</li> <li>minimal allocations</li> <li>low level APIs are used whenever possible</li> <li>no DOM updates outside of the render loop, no matter how trivial</li> <li>dedicated per-attribute intersection observers</li> <li>no subscribing to events not used by the application</li> <li>the key attribute</li> <li>etc</li> </ol>"},{"location":"news.html#maintainability","title":"Maintainability","text":"<p>The code is no longer allowed to be an unreadable cryptic mess, whose only purpose is to be optimally minify-able.</p> <p>Related functionality is grouped into separate files.</p>"},{"location":"news.html#quality","title":"Quality","text":"<p>The source code is thoroughly documented and unit tested with 100% coverage.</p> <p>File imports are automatically verified not to cause any cyclic dependencies.</p> <p>Since python was never a requirement for the functionality of the project, but only for the documentation and the examples, having it as an install script was clearly a mistake that made installing the package through npm potentially inconvenient. That has now been fixed.</p>"},{"location":"news.html#v31","title":"v3.1","text":""},{"location":"news.html#event-bubbling","title":"Event Bubbling","text":"<p>Event handling now bubbles up the DOM tree as you would expect.</p> <p>This is mostly a non-breaking convenience feature.</p> <p>Previously, it was necessary to make sure that an event is always triggered on the exact same element that contains the event handling logic.</p> <p>Like in the following example, using the <code>inert</code> attribute to make sure that the nested image does not \"steal\" the click events for itself:</p> <pre><code>&lt;button on:click=\"handleClick\"&gt;\n  &lt;img\n    inert\n    src=\"bat-cat.jpg\"\n  &gt;\n&lt;/button&gt;\n</code></pre> <p>With v3.1, this is no longer the case, because KEML will automatically locate the first parent element that matches the event.</p> <p>So, this is now equivalent:</p> <pre><code>&lt;button on:click=\"handleClick\"&gt;\n  &lt;img src=\"bat-cat.jpg\"&gt;\n&lt;/button&gt;\n</code></pre>"},{"location":"news.html#v3-is-finally-out","title":"v3 is finally out!","text":"<p>It is said that simplicity is hard, and absolute simplicity is hard absolutely.</p> <p>KEML v3 was that and much more.</p> <p>And, while a major version of a library could simply be prompted by any breaking change, what we have here is certainly not that case.</p> <p>It was probably more like v123, or something like that, behind the scenes with the sheer number of complete rewrites, head scratching, and a couple of moments of brilliance.</p> <p>v3 brings new features, stability, reliability, resilience, performance, memory efficiency and optimizations that were nigh impossible with v2.</p> <p>And it does it all while having an even smaller file size.</p> <p>So, what changed?</p>"},{"location":"news.html#no-magic","title":"No Magic","text":"<p>Magic, in programming, can be described as - behaviors determined by nothing other than naming something a certain way or placing it in a certain place.</p> <p>And it is almost always a really bad idea.</p> <p>The so called \"special actions\" were a major pain in the rear end that came out of technical limitations and nothing else.</p> <p>v3 embraces actions to the max, literally everything is controlled by them and nothing else and there are no special and/or reserved action names at all.</p>"},{"location":"news.html#observing-the-dom","title":"Observing the DOM","text":"<p>DOM changes are automatically observed in v3.</p> <p>Whether an element came from the server on the initial page load, after subsequent AJAX requests, is created or modified by userland code, by you changing something through the dev tools DOM Inspector tab, or even by some browser extension, it makes no difference at all.</p> <p>That's right, KEML will never be broken by another password manager ever again :)</p> <p>And if you want to use jQuery or React alongside KEML, you totally can. And you never need to tell it that you've changed something in the document.</p>"},{"location":"news.html#new-features","title":"New Features","text":"<p>v3 comes with a couple of new states, a couple of new ways to perform a redirect and somewhat of a way to handle hotkeys, but really, nothing Earth-shattering.</p> <p>The big deal is that the greatly improved codebase allows adding new features easily and without breaking the existing ones or negatively affecting the performance.</p>"},{"location":"news.html#breaking-changes","title":"Breaking Changes","text":"<p>The only breaking change is the absence of \"special\" actions.</p> <p>So, this:</p> <pre><code>&lt;a\n  on:click=\"pushState\"\n  href=\"/something\"\n&gt;&lt;/a&gt;\n</code></pre> <p>Has to turn into this (the same with <code>replaceState</code>):</p> <pre><code>&lt;a\n  on:click=\"someUniqueName\"\n  on=\"someUniqueName\"\n  redirect=\"pushState\"\n  href=\"/something\"\n&gt;&lt;/a&gt;\n</code></pre> <p>The <code>redirect</code> attribute cannot contain an endpoint configuration anymore.</p> <p>And this:</p> <pre><code>&lt;form on:submit=\"doSubmit reset\"&gt;&lt;/form&gt;\n</code></pre> <p>Has to turn into this:</p> <pre><code>&lt;form\n  on:submit=\"doSubmit resetThisForm\"\n  reset=\"resetThisForm\"\n&gt;&lt;/form&gt;\n</code></pre> <p>It looks more verbose, but offers infinitely more flexibility.</p> <p>That's all, folks!</p> <p>Happy coding and have an awesome day, Eugene K.</p>"},{"location":"render.html","title":"Rendering responses","text":"<p>HTML elements that trigger requests can initiate multiple result actions after receiving a server response.</p> <p>Multiple elements can initiate the same result action, thus triggering the render different responses under the same action name.</p> <p>Multiple elements can subscribe to the same result action and render the same server response.</p> <p>KEML applies the minimum set of DOM mutations necessary to synchronize the document with the server response.</p> <p>If the server response is determined to be the same as what is currently rendered in the document, no changes are applied.</p>"},{"location":"render.html#attributes","title":"Attributes","text":"<ol> <li><code>result</code> specified on an element that performs a request and contains a    space separated list of render actions to initiate</li> <li><code>error</code> works exactly like <code>result</code> but for situations when the server    responds with an unsuccessful status code</li> <li><code>render</code> specified on any element, including the same one that triggered the    request and contains the render action name to subscribe to</li> <li><code>key</code> is used to uniquely identify an element among its DOM siblings    (same level nodes). It is used to improve the performance of the diffing    algorithm and is always advisable to be used on elements whose position can    change among their siblings - when elements are added, removed, or reordered</li> <li><code>position</code> controls the render strategy to apply to itself:<ul> <li><code>replaceChildren</code> (default) replaces all of the elements' children with   the server response</li> <li><code>replaceWith</code> replaces the element itself with the server response</li> <li><code>before</code> renders the server response directly before the current element</li> <li><code>after</code> renders the server response directly after the current element</li> <li><code>prepend</code> prepends the server response before the first child of the   current element</li> <li><code>append</code> appends the server response after the last child of the current   element</li> </ul> </li> </ol>"},{"location":"render.html#basic-example","title":"Basic example","text":"<ul> <li>clicking the button initiates the <code>getUserCount</code> action</li> <li>the button itself subscribes to that action using the <code>on</code> attribute</li> <li>the button sends a \"GET\" request to \"/user-count\"</li> <li>upon successfully receiving the response the button initiates the <code>userCount</code>   result action</li> <li>the div subscribes to the <code>userCount</code> action and renders the server response   into itself</li> <li>the span subscribes to the <code>userCount</code> action and replaces itself with the   server response</li> </ul> <pre><code>&lt;button\n  on:click=\"getUserCount\"\n  on=\"getUserCount\"\n  get=\"/user-count\"\n  result=\"userCount\"\n&gt;\n  click me\n&lt;/button&gt;\n\n&lt;div render=\"userCount\"&gt;&lt;/div&gt;\n\n&lt;span\n  render=\"userCount\"\n  position=\"replaceWith\"\n&gt;&lt;/span&gt;\n</code></pre>"},{"location":"render.html#key-based-optimization-example","title":"Key based optimization example","text":"<p>Let's imagine that you server endpoint returns this html on the first request:</p> <pre><code>&lt;table&gt;\n  &lt;!-- heavy DOM with a lot of rows --&gt;\n&lt;/table&gt;\n</code></pre> <p>And on the next request it returns:</p> <pre><code>&lt;div class=\"info\"&gt;\n  Notification text\n&lt;/div&gt;\n\n&lt;table&gt;\n  &lt;!-- heavy DOM with a lot of rows --&gt;\n&lt;/table&gt;\n</code></pre> <p>The table used to be at position 0 amongst its siblings, and now it is at position 1.</p> <p>The renderer would have no way of knowing that that is the same table and would have to rerender everything from scratch.</p> <p>And since the tag names are not even the same in the same place they were before, we cannot take advantage of any diffing algorithm to help us.</p> <p>It would still work, but the performance would suffer greatly.</p> <p>Here is what your server should do:</p> <pre><code>&lt;div\n  key=\"notification\"\n  class=\"info\"\n&gt;\n  Notification text\n&lt;/div&gt;\n\n&lt;table key=\"table\"&gt;\n  &lt;!-- heavy DOM with a lot of rows --&gt;\n&lt;/table&gt;\n</code></pre> <p>Now, both elements clearly introduce themselves to the renderer, and the performance is amazing once again.</p> <p>Info</p> <p>Keys are not actions.</p> <p>They do not need to be globally unique, only across sibling DOM elements.</p>"},{"location":"state.html","title":"State actions","text":"<p>HTML elements can configure any number of attributes in response to state <code>actions</code> by prepending their names with <code>x-</code>.</p> <p>Multiple elements can handle the same action and configure their attributes differently.</p> <p>A state can essentially be viewed as a boolean flag that is always set to false by default.</p>"},{"location":"state.html#attributes","title":"Attributes","text":"<ol> <li><code>if:loading</code> specified on an element that launches a request, contains a   space separated list of state actions to turn ON immediately before starting   a request and to turn OFF immediately after a request completes</li> <li><code>if:error</code> specified on an element that launches a request, contains a space   separated list of state actions to turn OFF immediately before starting a   request and to turn ON immediately after a request fails</li> <li><code>if:invalid</code> specified on a form or a form field, contains a space separated   list of state actions to turn ON when the element becomes invalid and to turn   OFF when the element becomes valid (invalid forms and fields do not trigger   server requests)</li> <li><code>if:value</code> inputs, selects, text areas and checkboxes can be considered to   have a value when they are not empty</li> <li><code>if:intersects</code> is turned ON when the element intersects the viewport</li> <li><code>if</code> specified on any element, including the same one that issued a state   action, and subscribes to a single state action</li> <li>any attribute starting with <code>x-</code> will be activated when a state action turns    ON \u2014 replacing any existing attribute of the same name \u2014 and restored to its    original value when the state action turns OFF</li> </ol>"},{"location":"state.html#loading-state-example","title":"Loading State Example","text":"<ul> <li>the first div is initially visible and the second div is initially hidden</li> <li>clicking the button:<ul> <li>initiates the <code>loadData</code> action</li> <li>turns ON the <code>isLoadingData</code> state action, thus the first div becomes invisible and the second visible</li> <li>sends a \"GET\" request to \"/data\"</li> <li>after completion of the request turns OFF the <code>isLoadingData</code> state action, thus the first div becomes visible and the second invisible again</li> </ul> </li> </ul> <pre><code>&lt;button\n  on:click=\"loadData\"\n  on=\"loadData\"\n  get=\"/data\"\n  if:loading=\"isLoadingData\"\n&gt;\n  click me\n&lt;/button&gt;\n\n&lt;div\n  if=\"isLoadingData\"\n  x-style=\"display: none\"\n&gt;\n  not loading\n&lt;/div&gt;\n\n&lt;div\n  if=\"isLoadingData\"\n  style=\"display: none\"\n  x-style\n&gt;\n  loading\n&lt;/div&gt;\n</code></pre>"},{"location":"state.html#error-state-example","title":"Error State Example","text":"<ul> <li>the first div is initially visible and the second div is initially hidden</li> <li>clicking the button<ul> <li>initiates the <code>loadWrong</code> action</li> <li>turns OFF the <code>isError</code> state action, which does not change the visibility   of the divs</li> <li>sends a \"GET\" request to \"/non-existent\"</li> <li>after completion of the request turns ON the <code>isError</code> state action,   because the request has failed, thus the first div becomes invisible and   the second visible</li> </ul> </li> </ul> <pre><code>&lt;button\n  on:click=\"loadWrong\"\n  on=\"loadWrong\"\n  get=\"/non-existent\"\n  if:error=\"isError\"\n&gt;\n  click me\n&lt;/button&gt;\n\n&lt;div\n  if=\"isError\"\n  x-style=\"display: none\"\n&gt;\n  no error\n&lt;/div&gt;\n\n&lt;div\n  if=\"isError\"\n  style=\"display: none\"\n  x-style\n&gt;\n  error\n&lt;/div&gt;\n</code></pre>"},{"location":"state.html#invalid-state-example","title":"Invalid State Example","text":"<ul> <li>the first div will be visible initially as well as when the inputs' value   becomes a valid email</li> <li>the second div will be visible only when the inputs' value becomes an invalid   email</li> </ul> <pre><code>&lt;input\n  if:invalid=\"invalidEmail\"\n  type=\"email\"\n&gt;\n\n&lt;div\n  if=\"invalidEmail\"\n  x-style=\"display: none\"\n&gt;\n  valid\n&lt;/div&gt;\n\n&lt;div\n  if=\"invalidEmail\"\n  style=\"display: none\"\n  x-style\n&gt;\n  invalid\n&lt;/div&gt;\n</code></pre>"},{"location":"state.html#value-state-example","title":"Value State Example","text":"<ul> <li>the first div will be visible when the input value is cleared in some way</li> <li>the second div will be visible when the user enters something into the input</li> </ul> <pre><code>&lt;input\n  if:value=\"isNotEmpty\"\n  type=\"text\"\n&gt;\n\n&lt;div\n  if=\"isNotEmpty\"\n  x-style=\"display: none\"\n&gt;\n  empty\n&lt;/div&gt;\n\n&lt;div\n  if=\"isNotEmpty\"\n  style=\"display: none\"\n  x-style\n&gt;\n  not empty\n&lt;/div&gt;\n</code></pre>"},{"location":"state.html#intersects-state-example","title":"Intersects State Example","text":"<ul> <li>the first div will be visible when the user scrolls the page such that the paragraph is out of view or if the paragraph is removed from the page altogether</li> <li>the second div will be visible when the paragraph becomes visible in the viewport</li> </ul> <pre><code>&lt;p if:intersects=\"canSee\"&gt;&lt;/p&gt;\n\n&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\n\n&lt;div\n  if=\"canSee\"\n  x-style=\"display: none\"\n&gt;\n  out of viewport\n&lt;/div&gt;\n\n&lt;div\n  if=\"canSee\"\n  style=\"display: none\"\n  x-style\n&gt;\n  in the viewport\n&lt;/div&gt;\n</code></pre>"}]}